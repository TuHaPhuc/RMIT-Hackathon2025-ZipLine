// EcoMatch VN - Game Logic

// Game State
const gameState = {
    cards: [],
    flippedCards: [],
    matchedPairs: 0,
    score: 0,
    timer: 0,
    timerInterval: null,
    gameStarted: false,
    currentLanguage: 'en' // Default language
};

// Language translations
const translations = {
    en: {
        // Menu Screen
        gameTitle: "üåä EcoMatch VN ‚ôªÔ∏è",
        gameSubtitle: "Match cards to learn about plastic pollution in Vietnam",
        playGame: "‚ñ∂ Play Game",
        howToPlay: "üìñ How to Play",
        about: "‚ÑπÔ∏è About",
        
        // Game Header
        score: "Score:",
        time: "Time:",
        matches: "Matches:",
        resetGame: "üîÑ Reset Game",
        mainMenu: "üè† Main Menu",
        
        // Instructions
        instructionsTitle: "üìñ How to Play",
        objective: "Objective:",
        objectiveText: "Match all cause and solution cards to learn about plastic pollution in Vietnam!",
        instruction1: "Click on a card to flip it and reveal the image",
        instruction2: "Click on a second card to find its matching pair",
        instruction3: "Each pair consists of a pollution cause and its solution",
        instruction4: "When you find a match, you'll learn an important environmental fact!",
        instruction5: "Match all 4 pairs as quickly as possible to get a high score",
        instruction6: "Your score increases with each match - faster matches earn bonus points!",
        tip: "üí° Tip:",
        tipText: "Pay attention to the facts - they'll help you understand Vietnam's plastic pollution crisis!",
        backToMenu: "‚Üê Back to Menu",
        
        // About
        aboutTitle: "‚ÑπÔ∏è About EcoMatch VN",
        whyMatters: "Why does this matter?",
        whyMattersText: "Vietnam is facing a serious plastic pollution crisis. With over 1.8 million tons of plastic waste generated annually, our beautiful rivers, beaches, and oceans are being choked by plastic debris. This affects marine life, human health, tourism, and our environment.",
        purpose: "The Purpose of This Game:",
        purposeText: "EcoMatch VN is an educational game designed to raise awareness about plastic pollution in Vietnam. Through engaging gameplay, you'll learn about the main causes of plastic pollution and the practical solutions being implemented across the country.",
        whatLearn: "What You'll Learn:",
        learn1: "Real statistics about Vietnam's plastic waste problem",
        learn2: "How pollution affects our environment and economy",
        learn3: "Government initiatives and community solutions",
        learn4: "How you can make a difference in your daily life",
        takeAction: "Take Action:",
        takeActionText: "After playing, consider these actions: use reusable bags, participate in beach cleanups, support recycling programs, and spread awareness about the importance of reducing plastic waste!",
        
        // Results
        congratulations: "üéâ Congratulations!",
        congratsMessage: "You've completed EcoMatch VN!",
        finalScore: "Final Score",
        timeTaken: "Time Taken",
        impactMessage: "üåç Great job! You've learned 4 important facts about plastic pollution in Vietnam. Now, take action in your daily life to help reduce plastic waste!",
        shareMessage: "üíö Share your achievement and spread awareness!",
        playAgain: "üéÆ Play Again",
        
        // Modal
        matchFound: "‚úì Match Found!",
        continue: "Continue"
    },
    vi: {
        // Menu Screen
        gameTitle: "üåä EcoMatch VN ‚ôªÔ∏è",
        gameSubtitle: "Gh√©p th·∫ª ƒë·ªÉ h·ªçc v·ªÅ √¥ nhi·ªÖm nh·ª±a t·∫°i Vi·ªát Nam",
        playGame: "‚ñ∂ Ch∆°i Ngay",
        howToPlay: "üìñ H∆∞·ªõng D·∫´n",
        about: "‚ÑπÔ∏è Gi·ªõi Thi·ªáu",
        
        // Game Header
        score: "ƒêi·ªÉm:",
        time: "Th·ªùi gian:",
        matches: "C·∫∑p gh√©p:",
        resetGame: "üîÑ Ch∆°i L·∫°i",
        mainMenu: "üè† V·ªÅ Menu",
        
        // Instructions
        instructionsTitle: "üìñ H∆∞·ªõng D·∫´n Ch∆°i",
        objective: "M·ª•c ti√™u:",
        objectiveText: "Gh√©p t·∫•t c·∫£ c√°c c·∫∑p th·∫ª nguy√™n nh√¢n v√† gi·∫£i ph√°p ƒë·ªÉ h·ªçc v·ªÅ √¥ nhi·ªÖm nh·ª±a t·∫°i Vi·ªát Nam!",
        instruction1: "Nh·∫•p v√†o th·∫ª ƒë·ªÉ l·∫≠t v√† xem h√¨nh ·∫£nh",
        instruction2: "Nh·∫•p v√†o th·∫ª th·ª© hai ƒë·ªÉ t√¨m c·∫∑p kh·ªõp",
        instruction3: "M·ªói c·∫∑p bao g·ªìm m·ªôt nguy√™n nh√¢n g√¢y √¥ nhi·ªÖm v√† gi·∫£i ph√°p t∆∞∆°ng ·ª©ng",
        instruction4: "Khi t√¨m ƒë∆∞·ª£c c·∫∑p ƒë√∫ng, b·∫°n s·∫Ω h·ªçc ƒë∆∞·ª£c m·ªôt th√¥ng tin m√¥i tr∆∞·ªùng quan tr·ªçng!",
        instruction5: "Gh√©p t·∫•t c·∫£ 4 c·∫∑p c√†ng nhanh c√†ng t·ªët ƒë·ªÉ ƒë·∫°t ƒëi·ªÉm cao",
        instruction6: "ƒêi·ªÉm s·ªë tƒÉng v·ªõi m·ªói c·∫∑p ƒë√∫ng - gh√©p nhanh s·∫Ω ƒë∆∞·ª£c ƒëi·ªÉm th∆∞·ªüng!",
        tip: "üí° M·∫πo:",
        tipText: "Ch√∫ √Ω ƒë·∫øn c√°c th√¥ng tin - ch√∫ng gi√∫p b·∫°n hi·ªÉu v·ªÅ kh·ªßng ho·∫£ng √¥ nhi·ªÖm nh·ª±a t·∫°i Vi·ªát Nam!",
        backToMenu: "‚Üê V·ªÅ Menu",
        
        // About
        aboutTitle: "‚ÑπÔ∏è Gi·ªõi Thi·ªáu EcoMatch VN",
        whyMatters: "T·∫°i sao ƒëi·ªÅu n√†y quan tr·ªçng?",
        whyMattersText: "Vi·ªát Nam ƒëang ƒë·ªëi m·∫∑t v·ªõi cu·ªôc kh·ªßng ho·∫£ng √¥ nhi·ªÖm nh·ª±a nghi√™m tr·ªçng. V·ªõi h∆°n 1.8 tri·ªáu t·∫•n r√°c th·∫£i nh·ª±a ƒë∆∞·ª£c t·∫°o ra h√†ng nƒÉm, c√°c d√≤ng s√¥ng, b√£i bi·ªÉn v√† ƒë·∫°i d∆∞∆°ng tuy·ªát ƒë·∫πp c·ªßa ch√∫ng ta ƒëang b·ªã nh·ª±a l√†m t·∫Øc ngh·∫Ωn. ƒêi·ªÅu n√†y ·∫£nh h∆∞·ªüng ƒë·∫øn sinh v·∫≠t bi·ªÉn, s·ª©c kh·ªèe con ng∆∞·ªùi, du l·ªãch v√† m√¥i tr∆∞·ªùng.",
        purpose: "M·ª•c ƒë√≠ch c·ªßa tr√≤ ch∆°i:",
        purposeText: "EcoMatch VN l√† tr√≤ ch∆°i gi√°o d·ª•c ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ n√¢ng cao nh·∫≠n th·ª©c v·ªÅ √¥ nhi·ªÖm nh·ª±a t·∫°i Vi·ªát Nam. Qua gameplay h·∫•p d·∫´n, b·∫°n s·∫Ω h·ªçc v·ªÅ c√°c nguy√™n nh√¢n ch√≠nh g√¢y √¥ nhi·ªÖm nh·ª±a v√† c√°c gi·∫£i ph√°p th·ª±c t·∫ø ƒëang ƒë∆∞·ª£c tri·ªÉn khai tr√™n c·∫£ n∆∞·ªõc.",
        whatLearn: "B·∫°n s·∫Ω h·ªçc ƒë∆∞·ª£c g√¨:",
        learn1: "Th·ªëng k√™ th·ª±c t·∫ø v·ªÅ v·∫•n ƒë·ªÅ r√°c th·∫£i nh·ª±a c·ªßa Vi·ªát Nam",
        learn2: "√î nhi·ªÖm ·∫£nh h∆∞·ªüng nh∆∞ th·∫ø n√†o ƒë·∫øn m√¥i tr∆∞·ªùng v√† kinh t·∫ø",
        learn3: "C√°c s√°ng ki·∫øn c·ªßa ch√≠nh ph·ªß v√† gi·∫£i ph√°p c·ªông ƒë·ªìng",
        learn4: "C√°ch b·∫°n c√≥ th·ªÉ t·∫°o ra s·ª± kh√°c bi·ªát trong cu·ªôc s·ªëng h√†ng ng√†y",
        takeAction: "H√†nh ƒë·ªông ngay:",
        takeActionText: "Sau khi ch∆°i, h√£y xem x√©t c√°c h√†nh ƒë·ªông sau: s·ª≠ d·ª•ng t√∫i t√°i s·ª≠ d·ª•ng, tham gia d·ªçn d·∫πp b√£i bi·ªÉn, h·ªó tr·ª£ ch∆∞∆°ng tr√¨nh t√°i ch·∫ø v√† lan t·ªèa nh·∫≠n th·ª©c v·ªÅ t·∫ßm quan tr·ªçng c·ªßa vi·ªác gi·∫£m r√°c th·∫£i nh·ª±a!",
        
        // Results
        congratulations: "üéâ Ch√∫c M·ª´ng!",
        congratsMessage: "B·∫°n ƒë√£ ho√†n th√†nh EcoMatch VN!",
        finalScore: "ƒêi·ªÉm Cu·ªëi",
        timeTaken: "Th·ªùi Gian",
        impactMessage: "üåç Tuy·ªát v·ªùi! B·∫°n ƒë√£ h·ªçc ƒë∆∞·ª£c 4 th√¥ng tin quan tr·ªçng v·ªÅ √¥ nhi·ªÖm nh·ª±a t·∫°i Vi·ªát Nam. B√¢y gi·ªù, h√£y h√†nh ƒë·ªông trong cu·ªôc s·ªëng h√†ng ng√†y ƒë·ªÉ gi·∫£m r√°c th·∫£i nh·ª±a!",
        shareMessage: "üíö Chia s·∫ª th√†nh t√≠ch v√† lan t·ªèa nh·∫≠n th·ª©c!",
        playAgain: "üéÆ Ch∆°i L·∫°i",
        
        // Modal
        matchFound: "‚úì T√¨m Th·∫•y C·∫∑p!",
        continue: "Ti·∫øp T·ª•c"
    }
};

// Card pairs (cause-solution matching)
const cardPairs = [
    { id: 1, type: 'cause', image: 'assets/Cause-cards-single-use-plastic.png', match: 5 },      // Single-use plastics -> Reusable bags
    { id: 2, type: 'cause', image: 'assets/Cause-cards-littering.png', match: 6 },      // Littering -> Clean-up campaigns
    { id: 3, type: 'cause', image: 'assets/Cause-cards-fishing-nets.png', match: 7 },      // Ocean pollution -> Recycling
    { id: 4, type: 'cause', image: 'assets/Cause-cards-industrial-waste.png', match: 8 },      // Plastic production -> Government bans
    { id: 5, type: 'solution', image: 'assets/Solution-cards-reusable-bags.png', match: 1 }, // Reusable bags
    { id: 6, type: 'solution', image: 'assets/Solution-cards-clean-up-campaigns.png', match: 2 }, // Clean-up campaigns
    { id: 7, type: 'solution', image: 'assets/Solution-cards-recycling.png', match: 3 }, // Recycling
    { id: 8, type: 'solution', image: 'assets/Solution-cards-government-bans.png', match: 4 }  // Government bans
];

// Educational facts about plastic pollution in Vietnam
const educationalFacts = {
    en: [
        {
            title: "üåä Plastic Pollution in Vietnam",
            content: "Vietnam generates approximately 1.8 million tons of plastic waste annually, with only 27% being recycled. The majority of remaining plastic waste pollutes the land, water, and ocean environments."
        },
        {
            title: "üõçÔ∏è Single-Use Plastic Bags",
            content: "Vietnamese people use an average of 40 billion plastic bags each year. A single plastic bag takes 400-1000 years to fully decompose in the natural environment."
        },
        {
            title: "‚ôªÔ∏è Recycling Plastic",
            content: "Recycling 1 ton of plastic can save up to 5,774 kWh of electricity, 685 gallons of oil, 98 million BTU of energy, and 30 cubic meters of landfill space."
        },
        {
            title: "üåç Impact on Marine Life",
            content: "Over 100,000 marine animals die each year from ingesting or becoming entangled in plastic waste. The South China Sea, where Vietnam has a long coastline, is one of the most severely affected areas."
        }
    ],
    vi: [
        {
            title: "üåä √î nhi·ªÖm nh·ª±a t·∫°i Vi·ªát Nam",
            content: "Vi·ªát Nam th·∫£i ra kho·∫£ng 1.8 tri·ªáu t·∫•n r√°c th·∫£i nh·ª±a m·ªói nƒÉm, trong ƒë√≥ ch·ªâ c√≥ 27% ƒë∆∞·ª£c t√°i ch·∫ø. Ph·∫ßn l·ªõn r√°c th·∫£i nh·ª±a c√≤n l·∫°i g√¢y √¥ nhi·ªÖm m√¥i tr∆∞·ªùng ƒë·∫•t, n∆∞·ªõc v√† bi·ªÉn."
        },
        {
            title: "üõçÔ∏è T√∫i nilon m·ªôt l·∫ßn",
            content: "Ng∆∞·ªùi Vi·ªát Nam s·ª≠ d·ª•ng trung b√¨nh 40 t·ª∑ t√∫i nilon m·ªói nƒÉm. M·ªôt t√∫i nilon c·∫ßn 400-1000 nƒÉm m·ªõi ph√¢n h·ªßy ho√†n to√†n trong m√¥i tr∆∞·ªùng t·ª± nhi√™n."
        },
        {
            title: "‚ôªÔ∏è T√°i ch·∫ø nh·ª±a",
            content: "T√°i ch·∫ø 1 t·∫•n nh·ª±a c√≥ th·ªÉ ti·∫øt ki·ªám ƒë·∫øn 5,774 kWh ƒëi·ªán, 685 gallon d·∫ßu, 98 tri·ªáu BTU nƒÉng l∆∞·ª£ng v√† 30 m¬≥ kh√¥ng gian ch√¥n l·∫•p r√°c."
        },
        {
            title: "üåç T√°c ƒë·ªông ƒë·∫øn sinh v·∫≠t bi·ªÉn",
            content: "H∆°n 100,000 sinh v·∫≠t bi·ªÉn ch·∫øt m·ªói nƒÉm do ƒÉn ph·∫£i ho·∫∑c m·∫Øc k·∫πt trong r√°c th·∫£i nh·ª±a. Bi·ªÉn ƒê√¥ng, n∆°i Vi·ªát Nam c√≥ b·ªù bi·ªÉn d√†i, l√† m·ªôt trong nh·ªØng khu v·ª±c b·ªã ·∫£nh h∆∞·ªüng n·∫∑ng n·ªÅ nh·∫•t."
        }
    ]
};

// Initialize game
function init() {
    showScreen('menu-screen');
    setupEventListeners();
    updateLanguage(); // Set initial language
}

// Setup event listeners
function setupEventListeners() {
    // Event listeners are handled by onclick in HTML
    // Additional setup can go here if needed
}

// Language Functions
function toggleLanguage() {
    gameState.currentLanguage = gameState.currentLanguage === 'en' ? 'vi' : 'en';
    localStorage.setItem('ecomatch_language', gameState.currentLanguage);
    updateLanguage();
    updateLanguageToggle();
}

function updateLanguageToggle() {
    const langOptions = document.querySelectorAll('.lang-option');
    langOptions.forEach(option => {
        const optionLang = option.getAttribute('data-lang');
        if (optionLang === gameState.currentLanguage) {
            option.classList.add('active');
        } else {
            option.classList.remove('active');
        }
    });
}

function updateLanguage() {
    const lang = gameState.currentLanguage;
    const t = translations[lang];
    
    // Menu Screen
    updateElement('game-title', t.gameTitle);
    updateElement('game-subtitle', t.gameSubtitle);
    updateElement('btn-play', t.playGame);
    updateElement('btn-instructions', t.howToPlay);
    updateElement('btn-about', t.about);
    
    // Instructions Screen
    updateElement('instructions-title', t.instructionsTitle);
    updateElement('objective-label', t.objective);
    updateElement('objective-text', t.objectiveText);
    updateElement('instruction-1', t.instruction1);
    updateElement('instruction-2', t.instruction2);
    updateElement('instruction-3', t.instruction3);
    updateElement('instruction-4', t.instruction4);
    updateElement('instruction-5', t.instruction5);
    updateElement('instruction-6', t.instruction6);
    updateElement('tip-label', t.tip);
    updateElement('tip-text', t.tipText);
    updateElements('back-to-menu', t.backToMenu);
    
    // About Screen
    updateElement('about-title', t.aboutTitle);
    updateElement('why-matters-label', t.whyMatters);
    updateElement('why-matters-text', t.whyMattersText);
    updateElement('purpose-label', t.purpose);
    updateElement('purpose-text', t.purposeText);
    updateElement('what-learn-label', t.whatLearn);
    updateElement('learn-1', t.learn1);
    updateElement('learn-2', t.learn2);
    updateElement('learn-3', t.learn3);
    updateElement('learn-4', t.learn4);
    updateElement('take-action-label', t.takeAction);
    updateElement('take-action-text', t.takeActionText);
    
    // Game Screen
    updateElement('score-label', t.score);
    updateElement('time-label', t.time);
    updateElement('matches-label', t.matches);
    updateElements('reset-game-btn', t.resetGame);
    updateElements('main-menu-btn', t.mainMenu);
    
    // Results Screen
    updateElement('results-title', t.congratulations);
    updateElement('congrats-message', t.congratsMessage);
    updateElement('final-score-label', t.finalScore);
    updateElement('final-time-label', t.timeTaken);
    updateElement('final-matches-label', t.matches);
    updateElement('impact-message', t.impactMessage);
    updateElement('share-message', t.shareMessage);
    updateElement('play-again-btn', t.playAgain);
    
    // Modal
    updateElement('modal-title', t.matchFound);
    updateElement('modal-continue', t.continue);
}

function updateElement(id, text) {
    const element = document.getElementById(id);
    if (element) {
        element.textContent = text;
    }
}

function updateElements(className, text) {
    const elements = document.querySelectorAll(`.${className}`);
    elements.forEach(el => {
        el.textContent = text;
    });
}

// Screen management
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }
    
    // Reset game if going back to menu from play screen
    if (screenId === 'menu-screen' && gameState.gameStarted) {
        stopTimer();
        gameState.gameStarted = false;
    }
}

// Start game
function startGame() {
    resetGame();
    // Only show screen if we're on a single-page app, not on play.html
    const playScreen = document.getElementById('play-screen');
    if (playScreen) {
        showScreen('play-screen');
    }
    initializeCards();
    startTimer();
    gameState.gameStarted = true;
}

// Initialize cards
function initializeCards() {
    const gameBoard = document.getElementById('game-board');
    gameBoard.innerHTML = '';
    
    // Shuffle cards
    gameState.cards = shuffleArray([...cardPairs]);
    
    // Create card elements
    gameState.cards.forEach((card, index) => {
        const cardElement = createCardElement(card, index);
        gameBoard.appendChild(cardElement);
    });
}

// Create card element
function createCardElement(card, index) {
    const cardDiv = document.createElement('div');
    cardDiv.className = 'card';
    cardDiv.dataset.id = card.id;
    cardDiv.dataset.match = card.match;
    cardDiv.dataset.index = index;
    
    cardDiv.innerHTML = `
        <div class="card-face card-back">
            <img src="assets/Card_back.png" alt="Card back">
        </div>
        <div class="card-face card-front">
            <img src="${card.image}" alt="${card.type} card">
        </div>
    `;
    
    cardDiv.addEventListener('click', () => flipCard(cardDiv));
    
    return cardDiv;
}

// Flip card
function flipCard(cardElement) {
    // Prevent flipping if:
    // - Card is already flipped
    // - Two cards are already flipped
    // - Card is already matched
    if (cardElement.classList.contains('flipped') || 
        gameState.flippedCards.length >= 2 ||
        cardElement.classList.contains('matched')) {
        return;
    }
    
    // Flip the card
    cardElement.classList.add('flipped');
    gameState.flippedCards.push(cardElement);
    
    // Check for match if two cards are flipped
    if (gameState.flippedCards.length === 2) {
        // Wait longer to let user see both cards before checking
        setTimeout(checkMatch, 1000);
    }
}

// Check if cards match
function checkMatch() {
    const [card1, card2] = gameState.flippedCards;
    const id1 = parseInt(card1.dataset.id);
    const match1 = parseInt(card1.dataset.match);
    const id2 = parseInt(card2.dataset.id);
    const match2 = parseInt(card2.dataset.match);
    
    // Check if cards match (one's id matches the other's match value)
    if (id1 === match2 && id2 === match1) {
        // Match found!
        handleMatch(card1, card2);
    } else {
        // No match
        handleMismatch(card1, card2);
    }
}

// Handle successful match
function handleMatch(card1, card2) {
    card1.classList.add('matched', 'match-animation');
    card2.classList.add('matched', 'match-animation');
    
    gameState.matchedPairs++;
    gameState.score += 100;
    updateScore();
    
    // Remove animation class after animation completes
    setTimeout(() => {
        card1.classList.remove('match-animation');
        card2.classList.remove('match-animation');
    }, 500);
    
    // Clear flipped cards
    gameState.flippedCards = [];
    
    // Show educational popup
    showEducationalPopup();
    
    // Check if game is complete
    if (gameState.matchedPairs === 4) {
        setTimeout(endGame, 1000);
    }
}

// Handle mismatch
function handleMismatch(card1, card2) {
    card1.classList.add('wrong-animation');
    card2.classList.add('wrong-animation');
    
    // Deduct points for wrong match
    gameState.score = Math.max(0, gameState.score - 10);
    updateScore();
    
    setTimeout(() => {
        card1.classList.remove('flipped', 'wrong-animation');
        card2.classList.remove('flipped', 'wrong-animation');
        gameState.flippedCards = [];
    }, 1000);
}

// Show educational popup
function showEducationalPopup() {
    const lang = gameState.currentLanguage;
    const fact = educationalFacts[lang][gameState.matchedPairs - 1];
    const modal = document.getElementById('fact-modal');
    const factText = document.getElementById('fact-text');
    
    if (fact && modal && factText) {
        factText.innerHTML = `<strong>${fact.title}</strong><br><br>${fact.content}`;
        modal.classList.add('active');
    }
}

// Close popup
function closeFactModal() {
    const modal = document.getElementById('fact-modal');
    if (modal) {
        modal.classList.remove('active');
    }
}

// Timer functions
function startTimer() {
    gameState.timer = 0;
    updateTimer();
    gameState.timerInterval = setInterval(() => {
        gameState.timer++;
        updateTimer();
    }, 1000);
}

function updateTimer() {
    const minutes = Math.floor(gameState.timer / 60);
    const seconds = gameState.timer % 60;
    document.getElementById('timer').textContent = 
        `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

function stopTimer() {
    if (gameState.timerInterval) {
        clearInterval(gameState.timerInterval);
        gameState.timerInterval = null;
    }
}

// Update score
function updateScore() {
    document.getElementById('score').textContent = gameState.score;
}

// Update matches
function updateMatches() {
    const matchesEl = document.getElementById('matches');
    if (matchesEl) {
        matchesEl.textContent = `${gameState.matchedPairs}/4`;
    }
}

// End game
function endGame() {
    stopTimer();
    
    // Calculate time bonus
    const timeBonus = Math.max(0, 500 - gameState.timer * 5);
    gameState.score += timeBonus;
    
    // Save results to localStorage
    const minutes = Math.floor(gameState.timer / 60);
    const seconds = gameState.timer % 60;
    const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    
    localStorage.setItem('ecomatch_results', JSON.stringify({
        score: gameState.score,
        time: timeString,
        matches: '4/4'
    }));
    
    // Redirect to results page
    setTimeout(() => {
        window.location.href = 'results.html';
    }, 1000);
}

// Play again
function playAgain() {
    window.location.href = 'play.html';
}

// Reset game
function resetGame() {
    stopTimer();
    gameState.cards = [];
    gameState.flippedCards = [];
    gameState.matchedPairs = 0;
    gameState.score = 0;
    gameState.timer = 0;
    gameState.gameStarted = false;
    
    updateScore();
    updateMatches();
    updateTimer();
    
    // Clear and reinitialize the game board
    const gameBoard = document.getElementById('game-board');
    if (gameBoard) {
        gameBoard.innerHTML = '';
        initializeCards();
        startTimer();
        gameState.gameStarted = true;
    }
}

// Shuffle array (Fisher-Yates algorithm)
function shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
}

// Initialize game when DOM is loaded
document.addEventListener('DOMContentLoaded', init);
